"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roundRegardlessSign = exports.floorRegardlessSign = exports.ceilRegardlessSign = exports.sum = exports.positiveModulo = exports.random = exports.map = exports.wrap = exports.clamp = exports.rlerp = exports.lerp = void 0;
__exportStar(require("./degTrig"), exports);
__exportStar(require("./tolerantMath"), exports);
function lerp(a, b, t) {
    return a + (b - a) * t;
}
exports.lerp = lerp;
function rlerp(a, b, n) {
    return (n - a) / (b - a);
}
exports.rlerp = rlerp;
function clamp(value, min, max) {
    return value < min ? min : value > max ? max : value;
}
exports.clamp = clamp;
function wrap(value, min, max) {
    const range = max - min;
    if (range <= 0) {
        return 0;
    }
    let res = (value - min) % range;
    if (res < 0) {
        res += range;
    }
    return res + min;
}
exports.wrap = wrap;
function map(value, inMin, inMax, outMin, outMax) {
    return lerp(outMin, outMax, rlerp(inMin, inMax, value));
}
exports.map = map;
function random(min, max, method = null) {
    const res = Math.random() * (max - min) + min;
    if (method === "ROUND") {
        return Math.round(res);
    }
    if (method === "FLOOR") {
        return Math.floor(res);
    }
    if (method === "CEIL") {
        return Math.ceil(res);
    }
    return res;
}
exports.random = random;
function positiveModulo(value, whole) {
    return ((value % whole) + whole) % whole;
}
exports.positiveModulo = positiveModulo;
function sum(...n) {
    return n.reduce((a, b) => a + b, 0);
}
exports.sum = sum;
function ceilRegardlessSign(value) {
    return Math.ceil(Math.abs(value)) * Math.sign(value);
}
exports.ceilRegardlessSign = ceilRegardlessSign;
function floorRegardlessSign(value) {
    return Math.floor(Math.abs(value)) * Math.sign(value);
}
exports.floorRegardlessSign = floorRegardlessSign;
function roundRegardlessSign(value) {
    return Math.round(Math.abs(value)) * Math.sign(value);
}
exports.roundRegardlessSign = roundRegardlessSign;
//# sourceMappingURL=index.js.map