/**
 * Utils for comparing numbers with tolerance for floating point errors.
 */
export declare class TolerantMath {
    static DEFAULT_TOLERANCE: number;
    /**
     * Alias for `isEqual`.
     */
    static eq: typeof TolerantMath.isEqual;
    /**
     * Alias for `isNotEqual`.
     */
    static ne: typeof TolerantMath.isNotEqual;
    /**
     * Alias for `isGreaterThan`.
     */
    static gt: typeof TolerantMath.isGreaterThan;
    /**
     * Alias for `isLessThan`.
     */
    static lt: typeof TolerantMath.isLessThan;
    /**
     * Alias for `isGreaterThanOrEqual`.
     */
    static ge: typeof TolerantMath.isGreaterThanOrEqual;
    /**
     * Alias for `isLessThanOrEqual`.
     */
    static le: typeof TolerantMath.isLessThanOrEqual;
    static isZero(n: number, tolerance?: number): boolean;
    static isEqual(a: number, b: number, tolerance?: number): boolean;
    static isNotEqual(a: number, b: number, tolerance?: number): boolean;
    static isGreaterThan(a: number, b: number, tolerance?: number): boolean;
    static isLessThan(a: number, b: number, tolerance?: number): boolean;
    static isGreaterThanOrEqual(a: number, b: number, tolerance?: number): boolean;
    static isLessThanOrEqual(a: number, b: number, tolerance?: number): boolean;
    static isBetween(n: number, lower: number, upper: number, tolerance?: number): boolean;
}
/**
 * Alias for TolerantMath
 */
export declare const TMath: typeof TolerantMath;
