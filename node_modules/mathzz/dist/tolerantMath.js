"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TMath = exports.TolerantMath = void 0;
/**
 * Utils for comparing numbers with tolerance for floating point errors.
 */
class TolerantMath {
    static isZero(n, tolerance = this.DEFAULT_TOLERANCE) {
        return Math.abs(n) < tolerance;
    }
    static isEqual(a, b, tolerance = this.DEFAULT_TOLERANCE) {
        return Math.abs(a - b) < tolerance;
    }
    static isNotEqual(a, b, tolerance = this.DEFAULT_TOLERANCE) {
        return Math.abs(a - b) > tolerance;
    }
    static isGreaterThan(a, b, tolerance = this.DEFAULT_TOLERANCE) {
        return a - b > tolerance;
    }
    static isLessThan(a, b, tolerance = this.DEFAULT_TOLERANCE) {
        return b - a > tolerance;
    }
    static isGreaterThanOrEqual(a, b, tolerance = this.DEFAULT_TOLERANCE) {
        return a - b > -tolerance;
    }
    static isLessThanOrEqual(a, b, tolerance = this.DEFAULT_TOLERANCE) {
        return b - a > -tolerance;
    }
    static isBetween(n, lower, upper, tolerance = this.DEFAULT_TOLERANCE) {
        return (this.isGreaterThanOrEqual(n, lower, tolerance) &&
            this.isLessThanOrEqual(n, upper, tolerance));
    }
}
exports.TolerantMath = TolerantMath;
_a = TolerantMath;
TolerantMath.DEFAULT_TOLERANCE = 1e-12;
/**
 * Alias for `isEqual`.
 */
TolerantMath.eq = _a.isEqual;
/**
 * Alias for `isNotEqual`.
 */
TolerantMath.ne = _a.isNotEqual;
/**
 * Alias for `isGreaterThan`.
 */
TolerantMath.gt = _a.isGreaterThan;
/**
 * Alias for `isLessThan`.
 */
TolerantMath.lt = _a.isLessThan;
/**
 * Alias for `isGreaterThanOrEqual`.
 */
TolerantMath.ge = _a.isGreaterThanOrEqual;
/**
 * Alias for `isLessThanOrEqual`.
 */
TolerantMath.le = _a.isLessThanOrEqual;
/**
 * Alias for TolerantMath
 */
exports.TMath = TolerantMath;
//# sourceMappingURL=tolerantMath.js.map