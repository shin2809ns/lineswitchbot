/**
 * Utils for comparing numbers with tolerance for floating point errors.
 */
export class TolerantMath {
  static DEFAULT_TOLERANCE = 1e-12;

  /**
   * Alias for `isEqual`.
   */
  static eq = this.isEqual;

  /**
   * Alias for `isNotEqual`.
   */
  static ne = this.isNotEqual;

  /**
   * Alias for `isGreaterThan`.
   */
  static gt = this.isGreaterThan;

  /**
   * Alias for `isLessThan`.
   */
  static lt = this.isLessThan;

  /**
   * Alias for `isGreaterThanOrEqual`.
   */
  static ge = this.isGreaterThanOrEqual;

  /**
   * Alias for `isLessThanOrEqual`.
   */
  static le = this.isLessThanOrEqual;

  static isZero(
    n: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return Math.abs(n) < tolerance;
  }

  static isEqual(
    a: number,
    b: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return Math.abs(a - b) < tolerance;
  }

  static isNotEqual(
    a: number,
    b: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return Math.abs(a - b) > tolerance;
  }

  static isGreaterThan(
    a: number,
    b: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return a - b > tolerance;
  }

  static isLessThan(
    a: number,
    b: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return b - a > tolerance;
  }

  static isGreaterThanOrEqual(
    a: number,
    b: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return a - b > -tolerance;
  }

  static isLessThanOrEqual(
    a: number,
    b: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return b - a > -tolerance;
  }

  static isBetween(
    n: number,
    lower: number,
    upper: number,
    tolerance: number = this.DEFAULT_TOLERANCE
  ): boolean {
    return (
      this.isGreaterThanOrEqual(n, lower, tolerance) &&
      this.isLessThanOrEqual(n, upper, tolerance)
    );
  }
}

/**
 * Alias for TolerantMath
 */
export const TMath = TolerantMath;
