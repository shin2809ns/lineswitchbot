"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Point = void 0;
const mathzz_1 = require("mathzz");
const Line_1 = require("./Line");
class Point {
    constructor(x, y) {
        if (typeof x === "number") {
            this.x = x;
            this.y = y;
        }
        else {
            this.x = x.x;
            this.y = x.y;
        }
    }
    vectorTo(point) {
        return new Point(point.x - this.x, point.y - this.y);
    }
    lerpVector(t) {
        return new Point(this.x * t, this.y * t);
    }
    lerpTo(point, t) {
        return new Point((0, mathzz_1.lerp)(this.x, point.x, t), (0, mathzz_1.lerp)(this.y, point.y, t));
    }
    lineTo(point) {
        return new Line_1.Line(this, point);
    }
    lineBy(vector) {
        return new Line_1.Line(this, {
            x: this.x + vector.x,
            y: this.y + vector.y,
        });
    }
    isOnLine(line) {
        if (!(line instanceof Line_1.Line)) {
            line = new Line_1.Line(line.p1, line.p2);
        }
        const [a, b, c] = line.generalForm;
        return mathzz_1.TMath.isZero(a * this.x + b * this.y + c);
    }
    rlerpOnLine(line) {
        if (!(line instanceof Line_1.Line)) {
            line = new Line_1.Line(line.p1, line.p2);
        }
        if (!this.isOnLine(line)) {
            throw new Error("Point is not on line");
        }
        return line.rlerp(this);
    }
}
exports.Point = Point;
//# sourceMappingURL=Point.js.map