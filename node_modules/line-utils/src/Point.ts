import { lerp, TMath } from "mathzz";
import { Line, LineDef } from "./Line";

export interface PointDef {
  x: number;
  y: number;
}

export class Point implements PointDef {
  x: number;
  y: number;

  constructor(x: number, y: number);
  constructor(point: PointDef);
  constructor(x: number | PointDef, y?: number) {
    if (typeof x === "number") {
      this.x = x;
      this.y = y!;
    } else {
      this.x = x.x;
      this.y = x.y;
    }
  }

  vectorTo(point: PointDef): Point {
    return new Point(point.x - this.x, point.y - this.y);
  }

  lerpVector(t: number): Point {
    return new Point(this.x * t, this.y * t);
  }

  lerpTo(point: PointDef, t: number): Point {
    return new Point(lerp(this.x, point.x, t), lerp(this.y, point.y, t));
  }

  lineTo(point: PointDef): Line {
    return new Line(this, point);
  }

  lineBy(vector: PointDef): Line {
    return new Line(this, {
      x: this.x + vector.x,
      y: this.y + vector.y,
    });
  }

  isOnLine(line: LineDef): boolean {
    if (!(line instanceof Line)) {
      line = new Line(line.p1, line.p2);
    }
    const [a, b, c] = (line as Line).generalForm;
    return TMath.isZero(a * this.x + b * this.y + c);
  }

  rlerpOnLine(line: LineDef): number {
    if (!(line instanceof Line)) {
      line = new Line(line.p1, line.p2);
    }
    if (!this.isOnLine(line)) {
      throw new Error("Point is not on line");
    }
    return (line as Line).rlerp(this);
  }
}
